import React from 'react';
import { Button } from '@/components/ui/button';
import { ArrowRight, Github, GitBranch, GitMerge, TestTube } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

// TODO: Uncomment and use if AuthGuard and AppShell are available
// import { AuthGuard } from '@/components/auth/AuthGuard';
// import { AppShell } from '@/components/layout/AppShell';
// import { ErrorBoundary } from '@/components/ui/ErrorBoundary';

// RepoConnector Component
const RepoConnector = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <GitBranch className="h-5 w-5" />
          Repository Connections
        </CardTitle>
        <CardDescription>Connect and manage your code repositories</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {/* GitHub Integration */}
          <Card className="border border-muted hover:border-primary transition-all">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center text-lg">
                <Github className="h-5 w-5 mr-2" />
                GitHub
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground">
              Connect your GitHub repositories to analyze code and manage workflows.
            </CardContent>
            <CardFooter>
              <Button size="sm" className="w-full">Connect GitHub</Button>
            </CardFooter>
          </Card>
          
          {/* GitLab Integration */}
          <Card className="border border-muted hover:border-primary transition-all">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center text-lg">
                <GitMerge className="h-5 w-5 mr-2" />
                GitLab
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground">
              Integrate with GitLab repositories for CI/CD and code management.
            </CardContent>
            <CardFooter>
              <Button size="sm" variant="outline" className="w-full">Connect GitLab</Button>
            </CardFooter>
          </Card>
          
          {/* Bitbucket Integration */}
          <Card className="border border-muted hover:border-primary transition-all">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center text-lg">
                <GitBranch className="h-5 w-5 mr-2" />
                Bitbucket
              </CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground">
              Link your Bitbucket repositories for complete code integration.
            </CardContent>
            <CardFooter>
              <Button size="sm" variant="outline" className="w-full">Connect Bitbucket</Button>
            </CardFooter>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
};

// APIIntegration Component
const APIIntegration = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>API Integrations</CardTitle>
        <CardDescription>Configure external API connections for your repositories</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="rest" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="rest">REST APIs</TabsTrigger>
            <TabsTrigger value="graphql">GraphQL</TabsTrigger>
            <TabsTrigger value="webhook">Webhooks</TabsTrigger>
          </TabsList>
          <TabsContent value="rest" className="mt-4 space-y-4">
            <div className="flex space-x-2">
              <Input placeholder="API Endpoint URL" className="flex-1" />
              <Select defaultValue="get">
                <SelectTrigger className="w-[110px]">
                  <SelectValue placeholder="Method" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="get">GET</SelectItem>
                  <SelectItem value="post">POST</SelectItem>
                  <SelectItem value="put">PUT</SelectItem>
                  <SelectItem value="delete">DELETE</SelectItem>
                </SelectContent>
              </Select>
              <Button>Test</Button>
            </div>
          </TabsContent>
          <TabsContent value="graphql" className="mt-4">
            <div className="flex flex-col space-y-4">
              <Input placeholder="GraphQL Endpoint" />
              <textarea 
                className="min-h-[150px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm" 
                placeholder="Enter your GraphQL query..."
                defaultValue={`{
  repository(name: "example") {
    name
    description
  }
}`}
              ></textarea>
              <Button>Execute Query</Button>
            </div>
          </TabsContent>
          <TabsContent value="webhook" className="mt-4">
            <div className="space-y-4">
              <div className="flex space-x-2">
                <Input placeholder="Webhook URL" className="flex-1" />
                <Button>Register</Button>
              </div>
              <div className="rounded-md bg-muted p-4">
                <p className="text-sm font-mono">https://nexus-platform.ai/api/webhooks/callback/12345</p>
                <p className="text-xs text-muted-foreground mt-2">Use this URL as your webhook callback endpoint</p>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

// ManualTestInterface Component
const ManualTestInterface = () => {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <TestTube className="h-5 w-5" />
          Test Interface
        </CardTitle>
        <CardDescription>Test your repository connections and data flows</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-1 block">Repository</label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select repository" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="repo1">nexus-core</SelectItem>
                  <SelectItem value="repo2">nexus-api</SelectItem>
                  <SelectItem value="repo3">nexus-frontend</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium mb-1 block">Test type</label>
              <Select defaultValue="connectivity">
                <SelectTrigger>
                  <SelectValue placeholder="Select test type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="connectivity">Connectivity</SelectItem>
                  <SelectItem value="permissions">Permissions</SelectItem>
                  <SelectItem value="webhooks">Webhooks</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="flex justify-end">
            <Button>Run Test</Button>
          </div>
          
          <div className="rounded-md bg-muted p-4 min-h-[100px] font-mono text-sm">
            <p className="text-muted-foreground italic">Test results will appear here...</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const RepositoriesContent = () => {
  return (
    // <AuthGuard>
    // <AppShell>
    <div className="p-6 space-y-8">
      {/* Main Content */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="space-y-6"
      >
        {/* ErrorBoundary for RepoConnector */}
        {/* <ErrorBoundary> */}
        <RepoConnector />
        {/* </ErrorBoundary> */}

        <div className="flex items-center gap-4">
          <Separator className="flex-1" />
          <Badge variant="outline" className="px-4 py-1">
            API Integrations
          </Badge>
          <Separator className="flex-1" />
        </div>

        {/* ErrorBoundary for APIIntegration */}
        {/* <ErrorBoundary> */}
        <APIIntegration />
        {/* </ErrorBoundary> */}

        <div className="flex justify-end">
          <Button variant="outline" className="gap-2">
            View Full Integration Hub
            <ArrowRight className="h-4 w-4" />
          </Button>
        </div>

        <div className="flex items-center gap-4">
          <Separator className="flex-1" />
          <Badge variant="outline" className="px-4 py-1">
            Testing Interface
          </Badge>
          <Separator className="flex-1" />
        </div>

        {/* ErrorBoundary for ManualTestInterface */}
        {/* <ErrorBoundary> */}
        <ManualTestInterface />
        {/* </ErrorBoundary> */}
      </motion.div>
    </div>
    // </AppShell>
    // </AuthGuard>
  );
};

export { RepositoriesContent };
